%Find head of list
head([H|_], H). 

%Find last element of list
last([T], T).
last([_|T], E):-
    last(T, E).

%Remove first and last elements
middle([_|T], Mid):-
    removelast(T, Mid).
removelast([_], []).
removelast([H|T], [H|M]):-
    removelast(T,M).

% Find	if	an	element	is	a	member	of	a	list
iselement(E, [E|T]).
iselement(E, [_|T]):-
    iselement(E, T).

% Append two	lists	together	to	form	a	third	list
append([],A,A).
append([A|B], C, [A|D]):-
    append(B,C,D).

% reverse	a	list	(using	append,	so	2	arguments)
reverse2([], []).
reverse2([H|T], ReversedList):- %Reverse is the same as reverse T then append it to H
    reverse2(T, ReversedT), 
    append(ReversedT, [H], ReversedList). %Why does H need sq brackets??
    
% reverse	a	list	(not using	append	and	3	arguments	instead)
reverse3([],A,A).
reverse3([H|T], A, X):-
    reverse3(T, [H|A], X).
reverse(L, R):-
    reverse3(L,[],R).

% delete	the	first	occurrence	of	an	element	from a	list
remove(Element, [], []).
remove(Element, [Element|T], T). % If head is desired element, remove it
remove(Element,[NotElement|T], [NotElement|ShortTail]):- % if not, 
    remove(Element, T, ShortTail). % remove element from tail, and append original head to front of the result

% delete	all	occurrences	of	an	element	from	a	list
removeall(Element, [], []).
removeall(Element, [Element|T], T2):- % If head is desired element, remove it
    !,
    removeall(Element, T, T2). % and remove all the others too
removeall(Element,[NotElement|T], [NotElement|ShortTail]):- % if not, 
    removeall(Element, T, ShortTail). % remove element from tail, and append original head to front of the result

% substitute	all	occurrences	of	one	element	for	another	in	a	list
sub(OldElem, NewElem, [], []).
sub(OldElem, NewElem, [OldElem|T], [NewElem|SubbedList]):- % if ythe desired elem is at the head, replace it,
    sub(OldElem, NewElem, T, SubbedList). % and replace it also in the rest of the list 

% test	for	sub-list
subtest([], Anylist). % Base case for when sublist has been fully popped off of full list and you are left comparing [] and Tfull. Debug to see what I mean
subtest([H|Tsub], [H|Tfull]):-
    subtest(Tsub, Tfull).
subtest([H|Tsub], [NotH|Tfull]):-
    subtest([H|Tsub], Tfull).

% sieve	a	list	(remove	all	elements	less	than	a	given	element)
sieve(Threshold, [], []).
sieve(Threshold, [H|T], [H|Sievedlist]):-
    H>=Threshold,
    sieve(Threshold, T, Sievedlist).
sieve(Threshold, [H|T], Sievedlist):-
    H<Threshold,
    sieve(Threshold, T, Sievedlist).

% partition	a	list	into	two	lists
partition([

% sort	a	list	using	quicksort	algorithm	(hint:	partitionâ€¦)
% subset
% intersection
% union
